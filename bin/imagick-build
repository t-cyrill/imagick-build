#!/usr/bin/env ruby
#
# Usage: imagick-build --definitions

require 'optparse'
require 'fileutils'
require 'json'

IMAGICK_VERSION='20160225'

# ---------------------------
def print_definitions
  puts 'Available versions:'
  get_definitions.each do |k,v|
    puts "  #{k}"
  end
end

def get_definitions
  JSON.load(File.read("#{File.dirname(__dir__)}/definitions.json")).sort do |a, b|
    b[0].split(/[^0-9]/).map(&:to_i) <=> a[0].split(/[^0-9]/).map(&:to_i)
  end
end

def workdir
  "#{File.dirname(__dir__)}/tmp"
end

def build(version)
  FileUtils.mkdir_p workdir unless File.exists? workdir
  repo = ImagickRepository.new workdir
  repo.clone unless repo.cloned?
  repo.checkout get_definitions[version]
  repo.build
end

def help
  puts "usage: imagick-build [--definitions] [-i VERSION] [--prefix=#{ENV['HOME']}/ImageMagick]"
end

class ImagickRepository
  URL = 'https://github.com/ImageMagick/ImageMagick.git'

  def initialize(dir)
    @dir = dir
    @gitdir = "#{dir}/ImageMagick"
  end

  def cloned?
    File.exists? @gitdir
  end

  def checkout(revision)
    chdir(gitdir) do
      pid = spawn  "git checkout #{revision}"
      Process.waitpid pid
    end
  end

  def clone
    chdir(@dir) do
      pid = spawn "git clone #{URL}"
      Process.waitpid pid
    end
  end

  def gitdir
    @gitdir
  end

  def chdir(dir)
    oldwd = Dir.getwd
    Dir.chdir dir
    yield
    Dir.chdir oldwd
  end

  def build
    chdir(gitdir) do
      pid = spawn "./configure --prefix=/tmp/ImageMagick && make && make install"
      Process.waitpid pid
      #pid = spawn "make && make install"
      #Process.waitpid pid
    end
  end
end


# ---------------------------

options = {
  prefix: "#{ENV['HOME']}/ImageMagick"
}
build_version = nil
mode = :help

opt = OptionParser.new
opt.on('--prefix') do |v|
  options[:prefix] = v
end

opt.on('--definitions') do
  mode = :print_definitions
end

opt.on('-i') do |v|
  mode = :install
  build_version = v
end

opt.parse!(ARGV)

case mode
when :install
  build(build_version, options)
when :print_definitions
  print_definitions
else
  help
end
exit
