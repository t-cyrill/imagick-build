#!/usr/bin/env ruby
#
# Usage: imagick-build --definitions

require 'optparse'
require 'fileutils'
require 'json'

IMAGICK_VERSION='20160225'

# ---------------------------
def print_definitions
  puts 'Available versions:'
  get_definitions.each do |k,v|
    puts "  #{k}"
  end
end

def get_definitions
  JSON.load(File.read("#{File.dirname(__dir__)}/definitions.json")).sort do |a, b|
    b[0].split(/[^0-9]/).map(&:to_i) <=> a[0].split(/[^0-9]/).map(&:to_i)
  end.to_h
end

def workdir
  "#{File.dirname(__dir__)}/tmp"
end

def build(version, options)
  FileUtils.mkdir_p workdir unless File.exists? workdir
  repo = ImagickRepository.new workdir
  repo.clone unless repo.cloned?
  repo.clean(force: true)

  revision = get_definitions[version]
  repo.checkout revision
  repo.reset(revision: 'HEAD', hard: true)
  repo.clean(force: true)
  repo.build(options)
end

def help
  puts "usage: imagick-build [--definitions] [-i VERSION] [--prefix=#{ENV['HOME']}/ImageMagick]"
end

class ImagickRepository
  URL = 'https://github.com/ImageMagick/ImageMagick.git'

  def initialize(dir)
    @dir = dir
    @gitdir = "#{dir}/ImageMagick"
  end

  def cloned?
    File.exists? @gitdir
  end

  def checkout(revision)
    chdir(gitdir) do
      command_wait "git checkout #{revision}"
    end
  end

  def clean(force: false)
    option = force ? '-df' : ''
    chdir(gitdir) do
      command_wait "git clean #{option}"
    end
  end

  def reset(revision: , hard: false)
    option = hard ? '--hard' : ''
    chdir(gitdir) do
      command_wait "git reset #{option} #{revision}"
    end
  end

  def clone
    chdir(@dir) do
      command_wait "git clone #{URL}"
    end
  end

  def gitdir
    @gitdir
  end

  def build(options)
    options_s = ''
    options_s << "--prefix=#{options[:prefix]}" if options[:prefix]
    chdir(gitdir) do
      command_wait "./configure #{options_s}"
      command_wait "make && make install"
    end
  end

  private

  def chdir(dir)
    oldwd = Dir.getwd
    Dir.chdir dir
    yield
    Dir.chdir oldwd
  end

  def command_wait(command)
    pid = spawn(command)
    Process.waitpid pid
  end
end


# ---------------------------

options = {
  prefix: "#{ENV['HOME']}/ImageMagick"
}
build_version = nil
mode = :help

opt = OptionParser.new
opt.on('--prefix=PATH') do |v|
  options[:prefix] = v
end

opt.on('--definitions') do
  mode = :print_definitions
end

opt.on('-i=VERSION') do |v|
  mode = :install
  build_version = v
end

opt.parse!(ARGV)

case mode
when :install
  build(build_version, options)
when :print_definitions
  print_definitions
else
  help
end
exit
